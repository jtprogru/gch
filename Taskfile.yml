# yaml-language-server: $schema=https://taskfile.dev/schema.json
---
version: "3"

vars:
  HOME:
    sh: echo $HOME
  BINARY_NAME: gch
  SYS_GO:
    sh: which go
  SYS_GOFMT:
    sh: which gofmt
  SYS_GOLANGCI_LINT:
    sh: which golangci-lint
  SYS_GOIMPORTS:
    sh: which goimports
  SYS_WATCHEXEC:
    sh: which watchexec

tasks:
  default:
    cmds:
      - task --list
    silent: true

  run.cmd:
    desc: Run as go run main.go
    deps:
      - precs
    cmds:
      - "{{ .SYS_GO }} run main.go {{ .CLI_ARGS }}"

  run.bin:
    desc: Run as binary
    deps:
      - build.bin
    cmds:
      - "{{ .HOME }}/go/bin/{{ .BINARY_NAME }} {{ .CLI_ARGS }}"

  tidy:
    desc: Install all requirements
    deps:
      - precs
    preconditions:
      - test -f go.mod
    cmds:
      - "{{ .SYS_GO }} mod tidy"

  build.bin:
    desc: Build bin file from go
    deps:
      - precs
    preconditions:
      - test -f main.go
    cmds:
      - "{{ .SYS_GO }} mod download"
      - "CGO_ENABLED=0 {{ .SYS_GO }} build -o {{ .HOME }}/go/bin/{{ .BINARY_NAME }} main.go"

  fmt:
    desc: Run go fmt
    cmds:
      - "{{ .SYS_GOFMT }} -s -w ."
      - "{{ .SYS_GOIMPORTS }} -format-only -d -l -v -w ."

  vet:
    desc: Run go vet ./...
    deps:
      - precs
    cmds:
      - "{{ .SYS_GO }} vet ./..."

  test:
    desc: Run all test
    deps:
      - precs
    cmds:
      - task test:short
      - task test:race
      - task test:coverage

  test:short:
    desc: Run short test
    deps:
      - precs
    cmds:
      - "{{ .SYS_GO }} test --short -coverprofile=cover.out -v ./..."

  test:coverage:
    desc: Run test coverage
    deps:
      - precs
    cmds:
      - "{{ .SYS_GO }} tool cover -func=cover.out"

  test:race:
    desc: Run tests with race
    deps:
      - precs
    cmds:
      - "{{ .SYS_GO }} test -race -v ./..."

  test:watch:
    desc: Run tests with watchexec
    deps:
      - precs
    cmds:
      - "{{ .SYS_WATCHEXEC }} -c clear -o do-nothing -d 100ms --exts go 'pkg=\".${WATCHEXEC_COMMON_PATH/$PWD/}/...\"; echo \"running tests for $pkg\"; go test \"$pkg\"'"

  lint:
    desc: Run golangci-lint
    deps:
      - precs
    cmds:
      - "{{ .SYS_GOLANGCI_LINT }} -v run --out-format=colored-line-number"

  install:
    desc: Build and install localy
    deps:
      - precs
    cmds:
      - "{{ .SYS_GO }} install"

  precs:
    desc: All preconditions
    preconditions:
      - test -f $(which go)
      - test -f $(which golangci-lint)
      - test -f $(which watchexec)
    internal: true
