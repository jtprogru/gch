version: "2"

linters:
  # Default set of linters.
  # The value can be: `standard`, `all`, `none`, or `fast`.
  # Default: standard
  default: all
  # Enable specific linter.
  # https://golangci-lint.run/usage/linters/#enabled-by-default
  enable:
    - asasalint
    - asciicheck
    - bidichk
    - bodyclose
    - canonicalheader
    # - containedctx
    - contextcheck
    - copyloopvar
    # - cyclop
    # - decorder
    # - depguard
    # - dogsled
    # - dupl
    - dupword
    - durationcheck
    # - err113
    - errcheck
    # - errchkjson
    - errname
    - errorlint
    # - exhaustive
    # - exhaustruct
    - exptostd
    - fatcontext
    # - forbidigo
    # - forcetypeassert
    - funcorder
    # - funlen
    # - ginkgolinter
    # - gocheckcompilerdirectives
    - gochecknoglobals
    - gochecknoinits
    - gochecksumtype
    # - gocognit
    # - goconst
    - gocritic
    # - gocyclo
    - godot
    # - godox
    # - goheader
    - gomoddirectives
    # - gomodguard
    # - goprintffuncname
    - gosec
    - gosmopolitan
    - govet
    # - grouper
    - iface
    # - importas
    - inamedparam
    - ineffassign
    # - interfacebloat
    - intrange
    # - ireturn
    # - lll
    # - loggercheck
    # - maintidx
    # - makezero
    - mirror
    - misspell
    # - mnd
    # - musttag
    - nakedret
    # - nestif
    - nilerr
    - nilnesserr
    - nilnil
    # - nlreturn
    - noctx
    - nolintlint
    # - nonamedreturns
    - nosprintfhostport
    # - paralleltest
    - perfsprint
    - prealloc
    - predeclared
    - promlinter
    - protogetter
    - reassign
    - recvcheck
    - revive
    - rowserrcheck
    - sloglint
    - spancheck
    - sqlclosecheck
    - staticcheck
    - tagalign
    - tagliatelle
    - testableexamples
    - testifylint
    # - testpackage
    - thelper
    - tparallel
    - unconvert
    - unparam
    - unused
    - usestdlibvars
    - usetesting
    # - varnamelen
    - wastedassign
    # - whitespace
    # - wrapcheck
    # - wsl
    - zerologlint
  # Disable specific linter.
  # https://golangci-lint.run/usage/linters/#disabled-by-default
  disable:
    # - asasalint
    # - asciicheck
    # - bidichk
    # - bodyclose
    # - canonicalheader
    - containedctx
    # - contextcheck
    # - copyloopvar
    - cyclop
    - decorder
    - depguard
    - dogsled
    - dupl
    # - dupword
    # - durationcheck
    - err113
    # - errcheck
    - errchkjson
    # - errname
    # - errorlint
    - exhaustive
    - exhaustruct
    # - exptostd
    # - fatcontext
    - forbidigo
    - forcetypeassert
    # - funcorder
    - funlen
    - ginkgolinter
    - gocheckcompilerdirectives
    # - gochecknoglobals
    # - gochecknoinits
    # - gochecksumtype
    - gocognit
    - goconst
    # - gocritic
    - gocyclo
    # - godot
    - godox
    - goheader
    # - gomoddirectives
    - gomodguard
    - goprintffuncname
    # - gosec
    # - gosmopolitan
    # - govet
    - grouper
    # - iface
    - importas
    # - inamedparam
    # - ineffassign
    - interfacebloat
    # - intrange
    - ireturn
    - lll
    - loggercheck
    - maintidx
    - makezero
    # - mirror
    # - misspell
    - mnd
    - musttag
    # - nakedret
    - nestif
    # - nilerr
    # - nilnesserr
    # - nilnil
    - nlreturn
    # - noctx
    # - nolintlint
    - nonamedreturns
    # - nosprintfhostport
    - paralleltest
    # - perfsprint
    # - prealloc
    # - predeclared
    # - promlinter
    # - protogetter
    # - reassign
    # - recvcheck
    # - revive
    # - rowserrcheck
    # - sloglint
    # - spancheck
    # - sqlclosecheck
    # - staticcheck
    # - tagalign
    # - tagliatelle
    # - testableexamples
    # - testifylint
    - testpackage
    # - thelper
    # - tparallel
    # - unconvert
    # - unparam
    # - unused
    # - usestdlibvars
    # - usetesting
    - varnamelen
    # - wastedassign
    - whitespace
    - wrapcheck
    - wsl
    # - zerologlint
  # All available settings of specific linters.
  # settings:
  #   # See the dedicated "linters.settings" documentation section.
  #   option: value
  # Defines a set of rules to ignore issues.
  # It does not skip the analysis, and so does not ignore "typecheck" errors.
  exclusions:
    # Mode of the generated files analysis.
    #
    # - `strict`: sources are excluded by strictly following the Go generated file convention.
    #    Source files that have lines matching only the following regular expression will be excluded: `^// Code generated .* DO NOT EDIT\.$`
    #    This line must appear before the first non-comment, non-blank text in the file.
    #    https://go.dev/s/generatedcode
    # - `lax`: sources are excluded if they contain lines like `autogenerated file`, `code generated`, `do not edit`, etc.
    # - `disable`: disable the generated files exclusion.
    #
    # Default: lax
    generated: strict
    # Log a warning if an exclusion rule is unused.
    # Default: false
    warn-unused: true
    # Predefined exclusion rules.
    # Default: []
    presets:
      - comments
      - std-error-handling
      - common-false-positives
      - legacy
    # Excluding configuration per-path, per-linter, per-text and per-source.
    rules:
      # Exclude some linters from running on tests files.
      - path: _test\.go
        linters:
          - gocyclo
          - errcheck
          - dupl
          - gosec
      # Run some linter only for test files by excluding its issues for everything else.
      - path-except: _test\.go
        linters:
          - forbidigo
      # Exclude some `staticcheck` messages.
      - linters:
          - staticcheck
        text: "SA9003:"
      # Exclude `lll` issues for long lines with `go:generate`.
      - linters:
          - lll
        source: "^//go:generate "

formatters:
  settings:
    gci:
      # Section configuration to compare against.
      # Section names are case-insensitive and may contain parameters in ().
      # The default order of sections is `standard > default > custom > blank > dot > alias > localmodule`.
      # If `custom-order` is `true`, it follows the order of `sections` option.
      # Default: ["standard", "default"]
      sections:
        - standard # Standard section: captures all standard packages.
        - default # Default section: contains all imports that could not be matched to another section type.
        - prefix(github.com/org/project) # Custom section: groups all imports with the specified Prefix.
        - blank # Blank section: contains all blank imports. This section is not present unless explicitly enabled.
        - dot # Dot section: contains all dot imports. This section is not present unless explicitly enabled.
        - alias # Alias section: contains all alias imports. This section is not present unless explicitly enabled.
        - localmodule # Local module section: contains all local packages. This section is not present unless explicitly enabled.
      # Checks that no inline comments are present.
      # Default: false
      no-inline-comments: true
      # Checks that no prefix comments (comment lines above an import) are present.
      # Default: false
      no-prefix-comments: true
      # Enable custom order of sections.
      # If `true`, make the section order the same as the order of `sections`.
      # Default: false
      custom-order: true
      # Drops lexical ordering for custom sections.
      # Default: false
      no-lex-order: true
